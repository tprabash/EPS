using System.Collections.Generic;
using System.Threading.Tasks;
using API.DTOs;
using API.Entities;
using API.Entities.Admin;

namespace API.Interfaces
{
    public interface IMasterRepository    
    {        
        //Task<IEnumerable<MenuJoinList>> GetMenuListAsync();
        //Task<int> SaveMenuListAsync(MenuListDto menuListDto);        
        // Task<IEnumerable<UserMenuList>> GetUserMenuList(int userId);
        // Task<int> SaveUserMenuListAsync(List<MenuUserDto> menuList);
        // Task<int> DeleteUserMenuListAsync(List<MenuUserDto> menuList);
        //Task<IEnumerable<PermitMenuDto>> GetAuthMenuListAsync(UserDto userDto);
        //Task<IEnumerable<ResultSet>> SaveMenuListAsync(MenuListDto menuListDto);
        Task<MstrUserLocation> GetDefaultLocForUser(int userId);
        Task<int> SetDefaultLocationAsync(MstrUserLocation userLoc);
        Task<int> SaveColorCardAsync(MstrColorCard mstrccard);
        Task<int> SaveSizeCardAsync(MstrSizeCard mstrscard);
        Task<int> SaveSizeAsync(MstrSize mstrSize);
        Task<int> SaveColorAsync(MstrColor mstrColor);
        Task<int> DeactiveSizeCardAsync(MstrSizeCard mstrscard);
        Task<int> DeactiveColorCardAsync(MstrColorCard mstrccard);
        Task<IEnumerable<MstrColor>> GetArticlColorAsync(int articleId);
        Task<IEnumerable<MstrSize>> GetArticlSizeAsync(int articleId);
        Task<IEnumerable<MstrCartonType>> GetCartonBoxTypeAsync(int articleId);
        Task<int> SaveUnitAsync(MstrUnits mstrUnits);
        Task<int> SaveProcessAsync(MstrProcess mstrProcess);
        Task<int> SaveStoresiteAsync(MstrStoreSite mstrStoreSite);        
        Task<int> SaveMaterialTypeAsync(MstrMaterialType MstrMaterialType);
        Task<int> SaveCategoryAsync(MstrCategory MstrCategory);
        Task<int> SaveBrandCodeAsync(MstrBrandCode MstrBrandCode);
        Task<int> SaveBrandAsync(MstrBrand MstrBrand);
        Task<int> DeactiveCustomerHdAsync(MstrCustomerHeader mstrCustomerHeader);   
        Task<IEnumerable<ReturnCustomerHdDto>> GetCustomerHdAllAsync(int LocId);     
        Task<int> SaveCustomerHdAsync(MstrCustomerHeader MstrCustomerHeader);
        Task<int> SaveCustomerLocAsync(MstrCustomerLocation customerLocation);
        Task<int> SaveCustomerUserAsync(MstrCustomerUsers customerUser);
        Task<int> DeactiveCustomerUserAsync(MstrCustomerUsers cusUser);
        Task<int> SaveCustomerBrandAsync(MstrCustomerBrand customerBrand);
        Task<int> DeleteCusCurrencyAsync(MstrCustomerCurrency customerCurrency);
        Task<int> SaveCustomerCurrencyAsync(MstrCustomerCurrency customercurrency);
        Task<int> SaveSupplierTypeAsync(MstrSupplierType suppliertype);
        Task<int> SaveAccountTypeAsync(MstrAccountType accounttype);
        Task<int> SaveGRNTypeAsync(MstrGRNType grntype);
        Task<int> SaveShipmentModeAsync(MstrShipmentModes shipmentModes);
        Task<int> SaveSupplierCurrencyAsync(TransSupplierCurrency suppliercurrency);
        Task<int> DeleteSupCurrencyAsync(TransSupplierCurrency supplierCurrency);
        Task<int> SaveCusAddressAsync(MstrCustomerAddressList cusAddressList);
        Task<int> DeactiveCustomerAddAsync(MstrCustomerAddressList cusAdd);
        Task<int> DeleteCusBrandAsync(MstrCustomerBrand customerBrand);
        Task<IEnumerable<ReturnCustomerAddDto>> GetCustomerAddressAsync(int customerId);
        //Task<IEnumerable<ReturnCustomerAddDto>> GetActiveCustomerAddressAsync(int customerId);
        Task<int> SaveCustomerDivisionAsync(MstrCustomerDivision cusDivision);
        Task<int> DeactiveCusLocAsync(MstrCustomerLocation mstrCustomerDetails);
        Task<ReturnDto> SaveProdDefinitionAsync(ProdDefinitionDto prodDefinitionDto);
        Task<int> DeleteProdDefinitionAsync(ProdDefinitionDto prodDefDto);
        Task<IEnumerable<ProdDefinitionDto>> GetProdDefinitionAsync(byte ProdHeaderId);
        Task<int> SaveProductGroupAsync(MstrProductGroup MstrProductGroup);
        Task<IEnumerable<ProdGroupDto>> GetProductGroupAsync(int ProdTypeId);
        Task<int> DeactiveProdGroupAsync(MstrProductGroup MstrProductGroup);
        Task<int> SaveProductTypeAsync(MstrProductType MstrProductType);
        // Task<IEnumerable<ProductTypeDto>> ProductTypeGetAsync();
        Task<int> DeactProductTypeAsync(MstrProductType MstrProductType);
        Task<int> SaveProductSubCatAsync(MstrProductSubCat MstrProductSubCat);
        Task<IEnumerable<ProductSubCatDto>> GetProductSubCatAsync(int ProdGroupId); 
        Task<int> DeactiveProdSubCatAsync(MstrProductSubCat MstrProductSubCat);       
        Task<int> SaveCostGroupAsync(MstrCostingGroup MstrCostingGroup);        
        Task<int> SaveSequenceSetAsync(TransSequenceSettings seqSettings);
        Task<int> SaveFlexFieldDetailsAsync(MstrFlexFieldDetails flexDetails); 
        Task<IEnumerable<FlexFieldReturnDto>> GetFlexFieldDtAsync(int CategoryId);
        Task<int> DeactiveFlexFieldDtAsync(MstrFlexFieldDetails flexFieldDt);
        Task<int> SaveFlexFieldValListAsync(MstrFlexFieldValueList flexDetailsVal);
        Task<int> DeleteFlexFieldValListAsync(MstrFlexFieldValueList flexDetailsVal);
        Task<ArticleReturnDto> SaveArticleAsync(SaveArticleDto article);
        Task<IEnumerable<ArticleDetailDto>> GetArtileDetailsAsync(ArticleSerchDto article);
        Task<IEnumerable<ArticleDetailDto>> GetCartonArtileDetailsAsync(ArticleSerchDto article);
        Task<IEnumerable<CatProdTypeDto>> GetCatProductTypeDtAsync(int catId);
        Task<int> AssignCatProdTypeAsync(List<MstrCatProductType> prod);
        Task<int> DeleteCatProdTypeAsync(List<MstrCatProductType> prod);
        Task<IEnumerable<ProdTypeGroupDto>> GetProdTypeGroupAsync(int prodTypeId);
        Task<int> AssignProdTypeGroupAsync(List<MstrProdTypeGroup> prod);
        Task<int> DeleteProdTypeGroupAsync(List<MstrProdTypeGroup> prod);   
        Task<IEnumerable<ColorAllocationDto>> GetColorAllocDetailsAsync(int ColorCardId);
        Task<int> SaveColorAllocationAsync(List<MstrColorAllocCard> colorAlloc);
        Task<int> DeleteColorAllocationAsync(List<MstrColorAllocCard> colorAlloc);  
        Task<IEnumerable<SizeAllocationDto>> GetSizeAllocDetailsAsync(int SizeCardId);
        Task<int> SaveSizeAllocationAsync(List<MstrSizeAllocCard> sizeAlloc); 
        Task<int> DeleteSizeAllocationAsync(List<MstrSizeAllocCard> sizeAlloc);
        Task<IEnumerable<ColorAllocationDto>> getArtColorPermitDtAsync(int ArticleId);   
        Task<int> SaveArticleColorAsync(List<MstrArticleColor> articleColor); 
        Task<IEnumerable<SizeAllocationDto>> getArtSizePermitDtAsync(int ArticleId);   
        Task<int> SaveArticleSizeAsync(List<MstrArticleSize> articleSize);
        Task<int> DeleteArticleSizeAsync(List<MstrArticleSize> articleSize);
        Task<int> DeleteArticleColorAsync(List<MstrArticleColor> articleColor);
        Task<int> SaveUnitConversionAsync(MstrUnitConversion unitConv);
        Task<int> SaveFluteTypeAsync(MstrFluteTypes fluteTypes);
        Task<int> SaveSalesAgentAsync(MstrSalesAgent salesAgent);
        Task<int> SaveCustomerTypeAsync(MstrCustomerType customerType);
        Task<int> SaveInvoiceTypeAsync(MstrInvoiceType invoiceType);
        Task<int> SavePaymentModeAsync(MstrPaymentMode paymentMode);
        Task<int> SaveMasterCompanyAsync(MstrCompany company);
        Task<int> SaveDispatchSiteAsync(MstrDispatchSite dispatchSite);
        Task<int> SaveMasterCartonTypeAsync(MstrCartonType carton);
        Task<int> SaveSpecialInstructionAsync(MstrSpecialInstruction specialInstruction);
        Task<int> SaveCustomerOtherCodeAsync(MstrCustomerOtherCode CustomerOtherCode);
        Task<int> SaveCustomerOtherAsync(MstrCustomerOther CustomerOther);
        Task<int> SaveCurrencyAsync(MstrCurrency currency);
        Task<int> SaveSupplierHdAsync(TransSupplierHeader transSupplierHeader);
        Task<int> SaveCountriesAsync(MstrCountries countries);
        Task<int> SavePaymentTermsAsync(MstrPaymentTerm paymentTerm);
        Task<int> SaveRejectReasonAsync(MstrRejectionReasons rejReasons);
        Task<int> SaveCodeDefinitionAsync(MstrCodeDefinition codeDefinition);
        Task<int> DeleteCodeDefinitionAsync(MstrCodeDefinition codeDefinition);
        Task<int> SaveAddressTypeAsync(MstrAddressType addressType);
        Task<int> SaveArticleUOMConvAsync(MstrArticleUOMConversion articleUOM);
        Task<int> ActiveArticleUOMConvAsync(MstrArticleUOMConversion articleUOM);
        Task<int> DisableCusDivisionAsync(MstrCustomerDivision cusDivision);
        Task<int> DeactiveArticleAsync(MstrArticle article);
        Task<int> DeactiveBrandCodeAsync(MstrBrandCode brandcode);
        Task<int> DeactiveSotrSiteAsync(MstrStoreSite storesite);
        Task<int> DeleteArticleAsync(MstrArticle article);
        Task<IEnumerable<ArticleDetailDto>> GetArtileDetailsAllAsync(int companyId);
        Task<IEnumerable<ArticleDetailDto>> GetActiveArtileDetailsAllAsync(int companyId);
        Task<IEnumerable<UserAppModuleDto>> GetUserAppModuleDtAsync(int userId);
        Task<int> SaveApproveRouteModuleAsync(TransApprovalRoutingModules appModule);
        Task<IEnumerable<ApprovalUsersDto>> GetApproveUsersAsync(int ARMId);
        Task<int> SaveApproveUserAsync(TransApproversByModule appUsers);
        Task<int> DeleteApproveModuleAsync(TransApprovalRoutingModules appModule);
        Task<int> DeleteApproveUsersAsync(TransApproversByModule appUsers);
        Task<int> SaveArticleBrandcodeAsync(MstrArticleBrandcode ArticleBrandcode);
        Task<int> DeleteArticleBrandCodeMappingAsync(MstrCustomerBrand customerBrand);
        Task<int> SaveUerMasterSettingsAsync(MstrUserMasterSetting UserMasterSettings);
        Task<int> SaveUerMasterPortsAsync(MstrPorts Ports);
        Task<IEnumerable<ReportSelectDateDto>> getDateSelectionAsync(int Id);
        Task<int> saveUserSiteAsync(UserSiteDto UserSite);
        Task<IEnumerable<UserSiteDto>> GetUserSiteList(int userId);
        Task<int> DeleteUserSiteListAsync(List<UserSiteDto> siteList);
        Task<DashBoardSalesDto> GetDashBoardOneDataAsync(dashBoardOneDto dashboardDt);
        Task<int> SaveForwarderAsync(MstrForwarder forwarder);
        Task<int> SavePurchaseOrderTypeAsync(MstrPurchaseOrderType purchaseordertype);
        Task<IEnumerable<UserReportList>> GetUserReportList(int userId);
        Task<int> SaveUserReportListAsync(List<ReportUserDto> reportList);
        Task<int> DeleteUserReportListAsync(List<ReportUserDto> reportList);
        Task<RefNumDto> GetInventoryRefNoAsync(MstrSerialNoInventory serialNo);
        Task<IEnumerable<MstrAgents>> GetUserMasterSettingAsync();
        Task<int> DeactProductAsync(MstrProducts MstrProducts);
        Task<int> SaveProductAsync(MstrProducts MstrProducts);
        Task<int> SaveDispatchReasonAsync(MstrDispatchReason dispatchreason);
        Task<int> DeactiveSupplierAsync(MstrSupplierHeader mstrSupplierHeader);
        Task<int> SaveSupplierAddressListAsync(TransSupplierAddresses supplieraddresses);
        Task<int> SaveMasterBasisAsync(MstrBasis basis);
        Task<int> SaveMasterAdditonalChargesAsync(MstrAdditionalCharges addcharge);
        Task<int> SaveMasterDeliveryTermAsync(MstrDeliveryTerms deliveryterms);
        Task<int> SaveMasterAddChargeBasisToModuleMapAsync(MstrAddChargeModule addCM);
        Task<int> SavePackageMappingAsync(MstrMapping packmap);
        Task<IEnumerable<PackmapDto>> GetMappedDtAsync(PackmapDto mapDt);
        Task<int> DeactiveAddChargeModulesAsync(MstrAddChargeModule addchargeM);
        Task<int> SaveMasterSpecialCategoryAsync(MstrSpecialCategory category);
        Task<int> SaveMasterSubCategoryAsync(MstrSubCategory category);
        Task<int> DeactiveSpecialCategoryAsync(MstrSpecialCategory category);
        Task<int> DeactiveSubCategoryAsync(MstrSubCategory category);
        Task<IEnumerable<ProdGroupSubCatDto>> GetGroupSubCatDtAsync(int groupId);
        Task<int> AssignProdGroupSubCatAsync(List<MstrProdGroupSubCat> prod);
        Task<int> DeleteProdGroupSubCatAsync(List<MstrProdGroupSubCat> prod);
        Task<IEnumerable<SubCatCategoryDto>> GetSubCatCategoryDtAsync(int subcatId);
        Task<int> AssignSubCatCategoryAsync(List<MstrProdSubCatCategory> prod);
        Task<int> DeleteSubCatCategoryAsync(List<MstrProdSubCatCategory> prod);
        Task<int> SaveFAMainCategoryAsync(MstrMainCategory mstrMainCategory);
        Task<int> SaveFASubCategoryAsync(MstrFASubCategory mstrFASubCategory);
        Task<IEnumerable<ColorAllocationDto>> GetFASubAllocDetailsAsync(int mainId);
        Task<int> saveSubToMainCategoryAllocationAsync(List<MstrFASubToMainCategoryAll> SubtoMainAlloc);
        Task<int> deleteSubToMainCategoryAllocationAsync(List<MstrFASubToMainCategoryAll> SubtoMainAlloc);
        Task<IEnumerable<BrandAllocationDto>> getBrandAllocDetailsAsync(int categoryId);
        Task<int> saveBrandAllocationAsync(List<MstrFASubToMainCategoryAll> brandAlloc);
        Task<int> ddeleteBrandToCategoryAllocationAsync(List<MstrFASubToMainCategoryAll> brandToCateall);
        Task<int> saveModelAsync(MstrModel MstrModel);
        Task<IEnumerable<ModelAllocationDto>> GetModelAllocDetailsAsync(int brandId);
        Task<int> saveModelAllocationAsync(List<MstrFASubToMainCategoryAll> modelAlloc);
        Task<int> deleteModelToBrandAllocationAsync(List<MstrFASubToMainCategoryAll> modelToBrandall);
        Task<ReturnDto> saveApperaleArticle(List<SaveArticleApperaleDetailDto> aaDt);
        Task<IEnumerable<DashboardExpChartDto>> GetDashBoardChartDetailsAsync(DashboardExpChartSearchDto dash);
        Task<IEnumerable<MWSMasterDto>> GetMWSMasterData(MWSMasterDto wsDt);
        Task<ReturnDto> SaveMWSMasterData(List<SaveMWSMasterDto> wsDt); 


    }
}